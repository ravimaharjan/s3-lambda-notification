AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Lambda application that calls the Lambda API.

AWSTemplateFormatVersion: '2010-09-09'
Description: A demo S3 bucket notification system.
Parameters:
  BucketName:
    Description: S3 Bucket name
    Type: String
    Default: item-store  
  Region:
    Description: Region
    Type: String
    Default: ap-southeast-2

Resources:

  PurchaseInputRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: 
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: S3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:PutObject'
            - 'S3:DeleteObject'
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  
  PurchaseProcessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: 
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: SESPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "ses:SendEmail"
            - "ses:SendRawEmail"
            Resource: "*"
      - PolicyName: ReadPurchasePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      TracingEnabled: true
      OpenApiVersion: 3.0.2

  PurchaseDataProcess:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function that is called after file is written in S3 bucket.
      Handler: purchase_process.handler
      Runtime: nodejs12.x
      Role: !GetAtt PurchaseProcessRole.Arn
      Code: .
      Timeout: 10
    
  PurchaseDataInput:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function that takes in the customer info and writes into S3 bucket.
      Handler: purchase_input.handler
      Runtime: nodejs12.x
      Role: !GetAtt PurchaseInputRole.Arn
      CodeUri: .
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaReadOnlyAccess
      Events:
        Input:
          Type: Api
          Properties:
            RestApiId: !Ref api
            Path: /purchase
            Method: POST 

      Environment:
        Variables:
          BucketName:
            Ref: BucketName

  Bucket:
    Type: AWS::S3::Bucket
    DependsOn: BucketPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt PurchaseDataProcess.Arn

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PurchaseDataProcess
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"
